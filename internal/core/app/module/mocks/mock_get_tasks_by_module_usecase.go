// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app/module/get_tasks_by_module_usecase.go

// Package mock_modulecase is a generated GoMock package.
package mock_modulecase

import (
	context "context"
	reflect "reflect"

	taskdomain "github.com/Giovani-Coelho/Doti-API/internal/core/domain/task"
	gomock "github.com/golang/mock/gomock"
)

// MockGetTasks is a mock of GetTasks interface.
type MockGetTasks struct {
	ctrl     *gomock.Controller
	recorder *MockGetTasksMockRecorder
}

// MockGetTasksMockRecorder is the mock recorder for MockGetTasks.
type MockGetTasksMockRecorder struct {
	mock *MockGetTasks
}

// NewMockGetTasks creates a new mock instance.
func NewMockGetTasks(ctrl *gomock.Controller) *MockGetTasks {
	mock := &MockGetTasks{ctrl: ctrl}
	mock.recorder = &MockGetTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTasks) EXPECT() *MockGetTasksMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTasks) Execute(ctx context.Context, moduleId string) ([]taskdomain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, moduleId)
	ret0, _ := ret[0].([]taskdomain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTasksMockRecorder) Execute(ctx, moduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTasks)(nil).Execute), ctx, moduleId)
}
