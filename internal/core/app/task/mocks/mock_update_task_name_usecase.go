// Code generated by MockGen. DO NOT EDIT.
// Source: update_task_name_usecase.go

// Package mock_taskcase is a generated GoMock package.
package mock_taskcase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateName is a mock of UpdateName interface.
type MockUpdateName struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateNameMockRecorder
}

// MockUpdateNameMockRecorder is the mock recorder for MockUpdateName.
type MockUpdateNameMockRecorder struct {
	mock *MockUpdateName
}

// NewMockUpdateName creates a new mock instance.
func NewMockUpdateName(ctrl *gomock.Controller) *MockUpdateName {
	mock := &MockUpdateName{ctrl: ctrl}
	mock.recorder = &MockUpdateNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateName) EXPECT() *MockUpdateNameMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateName) Execute(ctx context.Context, taskId int32, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, taskId, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateNameMockRecorder) Execute(ctx, taskId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateName)(nil).Execute), ctx, taskId, name)
}
