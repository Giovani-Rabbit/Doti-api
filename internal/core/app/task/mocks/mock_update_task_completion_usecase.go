// Code generated by MockGen. DO NOT EDIT.
// Source: task/update_task_completion_usecase.go

// Package mock_taskcase is a generated GoMock package.
package mock_taskcase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateCompletion is a mock of UpdateCompletion interface.
type MockUpdateCompletion struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateCompletionMockRecorder
}

// MockUpdateCompletionMockRecorder is the mock recorder for MockUpdateCompletion.
type MockUpdateCompletionMockRecorder struct {
	mock *MockUpdateCompletion
}

// NewMockUpdateCompletion creates a new mock instance.
func NewMockUpdateCompletion(ctrl *gomock.Controller) *MockUpdateCompletion {
	mock := &MockUpdateCompletion{ctrl: ctrl}
	mock.recorder = &MockUpdateCompletionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateCompletion) EXPECT() *MockUpdateCompletionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateCompletion) Execute(ctx context.Context, taskId int32, isComplete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, taskId, isComplete)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateCompletionMockRecorder) Execute(ctx, taskId, isComplete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateCompletion)(nil).Execute), ctx, taskId, isComplete)
}
