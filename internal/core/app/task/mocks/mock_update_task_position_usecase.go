// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/app/task/update_task_position_usecase.go

// Package mock_taskcase is a generated GoMock package.
package mock_taskcase

import (
	context "context"
	reflect "reflect"

	taskdto "github.com/Giovani-Coelho/Doti-API/internal/infra/http/handler/task/dtos"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdatePosition is a mock of UpdatePosition interface.
type MockUpdatePosition struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatePositionMockRecorder
}

// MockUpdatePositionMockRecorder is the mock recorder for MockUpdatePosition.
type MockUpdatePositionMockRecorder struct {
	mock *MockUpdatePosition
}

// NewMockUpdatePosition creates a new mock instance.
func NewMockUpdatePosition(ctrl *gomock.Controller) *MockUpdatePosition {
	mock := &MockUpdatePosition{ctrl: ctrl}
	mock.recorder = &MockUpdatePositionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdatePosition) EXPECT() *MockUpdatePositionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdatePosition) Execute(ctx context.Context, params *taskdto.UpdatePositionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdatePositionMockRecorder) Execute(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdatePosition)(nil).Execute), ctx, params)
}
