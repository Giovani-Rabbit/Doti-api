// Code generated by MockGen. DO NOT EDIT.
// Source: delete_task_usecase.go

// Package mock_taskcase is a generated GoMock package.
package mock_taskcase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDelete is a mock of Delete interface.
type MockDelete struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteMockRecorder
}

// MockDeleteMockRecorder is the mock recorder for MockDelete.
type MockDeleteMockRecorder struct {
	mock *MockDelete
}

// NewMockDelete creates a new mock instance.
func NewMockDelete(ctrl *gomock.Controller) *MockDelete {
	mock := &MockDelete{ctrl: ctrl}
	mock.recorder = &MockDeleteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelete) EXPECT() *MockDeleteMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDelete) Execute(ctx context.Context, userId string, taskId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userId, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDeleteMockRecorder) Execute(ctx, userId, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDelete)(nil).Execute), ctx, userId, taskId)
}
