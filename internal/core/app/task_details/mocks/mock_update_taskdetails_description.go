// Code generated by MockGen. DO NOT EDIT.
// Source: update_taskdetails_description_usecase.go

// Package mock_detailscase is a generated GoMock package.
package mock_detailscase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateDescription is a mock of UpdateDescription interface.
type MockUpdateDescription struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateDescriptionMockRecorder
}

// MockUpdateDescriptionMockRecorder is the mock recorder for MockUpdateDescription.
type MockUpdateDescriptionMockRecorder struct {
	mock *MockUpdateDescription
}

// NewMockUpdateDescription creates a new mock instance.
func NewMockUpdateDescription(ctrl *gomock.Controller) *MockUpdateDescription {
	mock := &MockUpdateDescription{ctrl: ctrl}
	mock.recorder = &MockUpdateDescriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateDescription) EXPECT() *MockUpdateDescriptionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateDescription) Execute(ctx context.Context, taskId int32, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, taskId, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateDescriptionMockRecorder) Execute(ctx, taskId, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateDescription)(nil).Execute), ctx, taskId, description)
}
