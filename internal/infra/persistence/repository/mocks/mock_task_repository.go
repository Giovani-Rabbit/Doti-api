// Code generated by MockGen. DO NOT EDIT.
// Source: repository/task_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	taskdomain "github.com/Giovani-Coelho/Doti-API/internal/core/domain/task"
	taskdto "github.com/Giovani-Coelho/Doti-API/internal/infra/http/handler/task/dtos"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(ctx context.Context, task taskdomain.Task) (taskdomain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(taskdomain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), ctx, task)
}

// ListByModuleId mocks base method.
func (m *MockTaskRepository) ListByModuleId(ctx context.Context, moduleId int32) ([]taskdomain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByModuleId", ctx, moduleId)
	ret0, _ := ret[0].([]taskdomain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByModuleId indicates an expected call of ListByModuleId.
func (mr *MockTaskRepositoryMockRecorder) ListByModuleId(ctx, moduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByModuleId", reflect.TypeOf((*MockTaskRepository)(nil).ListByModuleId), ctx, moduleId)
}

// PositionExists mocks base method.
func (m *MockTaskRepository) PositionExists(ctx context.Context, moduleId, position int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionExists", ctx, moduleId, position)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionExists indicates an expected call of PositionExists.
func (mr *MockTaskRepositoryMockRecorder) PositionExists(ctx, moduleId, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionExists", reflect.TypeOf((*MockTaskRepository)(nil).PositionExists), ctx, moduleId, position)
}

// UpdatePosition mocks base method.
func (m *MockTaskRepository) UpdatePosition(ctx context.Context, tasks []taskdto.TaskPositionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePosition", ctx, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePosition indicates an expected call of UpdatePosition.
func (mr *MockTaskRepositoryMockRecorder) UpdatePosition(ctx, tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePosition", reflect.TypeOf((*MockTaskRepository)(nil).UpdatePosition), ctx, tasks)
}
