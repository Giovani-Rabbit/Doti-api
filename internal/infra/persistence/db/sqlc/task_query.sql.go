// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_query.sql

package sqlc

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (module_id, name, is_completed, position, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, module_id, name, is_completed, position, created_at, updated_at
`

type CreateTaskParams struct {
	ModuleID    int32     `json:"module_id"`
	Name        string    `json:"name"`
	IsCompleted bool      `json:"is_completed"`
	Position    int32     `json:"position"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ModuleID,
		arg.Name,
		arg.IsCompleted,
		arg.Position,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Name,
		&i.IsCompleted,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskByPosition = `-- name: GetTaskByPosition :one
SELECT id, module_id, name, is_completed, position, created_at, updated_at
FROM tasks WHERE module_id = $1 AND position = $2
`

type GetTaskByPositionParams struct {
	ModuleID int32 `json:"module_id"`
	Position int32 `json:"position"`
}

func (q *Queries) GetTaskByPosition(ctx context.Context, arg GetTaskByPositionParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByPosition, arg.ModuleID, arg.Position)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Name,
		&i.IsCompleted,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskbyId = `-- name: GetTaskbyId :one
SELECT id, module_id, name, is_completed, position, created_at, updated_at
FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskbyId(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskbyId, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Name,
		&i.IsCompleted,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasksByModuleId = `-- name: ListTasksByModuleId :many
SELECT id, module_id, name, is_completed, position, created_at, updated_at
FROM tasks WHERE module_id = $1
ORDER BY position ASC
`

func (q *Queries) ListTasksByModuleId(ctx context.Context, moduleID int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByModuleId, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ModuleID,
			&i.Name,
			&i.IsCompleted,
			&i.Position,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskPosition = `-- name: UpdateTaskPosition :exec
UPDATE tasks SET position = $2
WHERE id = $1
`

type UpdateTaskPositionParams struct {
	ID       int32 `json:"id"`
	Position int32 `json:"position"`
}

func (q *Queries) UpdateTaskPosition(ctx context.Context, arg UpdateTaskPositionParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskPosition, arg.ID, arg.Position)
	return err
}
